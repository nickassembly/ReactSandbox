{"ast":null,"code":"/**\n * @remix-run/router v1.4.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, detectErrorBoundary, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        hasErrorBoundary: detectErrorBoundary(route),\n        id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        hasErrorBoundary: detectErrorBoundary(route),\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, detectErrorBoundary, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      const starParam = params[star]; // Apply the splat\n\n      return starParam;\n    }\n\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n\n      if (optional === \"?\") {\n        return param == null ? \"\" : param;\n      }\n\n      if (param == null) {\n        invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n      }\n\n      return param;\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultDetectErrorBoundary = route => Boolean(route.hasErrorBoundary); //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let detectErrorBoundary = init.detectErrorBoundary || defaultDetectErrorBoundary; // Routes keyed by ID\n\n  let manifest = {}; // Routes in tree format for matching\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, detectErrorBoundary, undefined, manifest);\n  let inFlightDataRoutes; // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && ( // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n\n          reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    });\n\n    if (state.initialized) {\n      return router;\n    }\n\n    let lazyMatches = state.matches.filter(m => m.route.lazy);\n\n    if (lazyMatches.length === 0) {\n      // Kick off initial data load if needed.  Use Pop to avoid modifying history\n      startNavigation(Action.Pop, state.location);\n      return router;\n    } // Load lazy modules, then kick off initial data load if needed\n\n\n    let lazyPromises = lazyMatches.map(m => loadLazyRouteModule(m.route, detectErrorBoundary, manifest));\n    Promise.all(lazyPromises).then(() => {\n      let initialized = !state.matches.some(m => m.route.loader) || init.hydrationData != null;\n\n      if (initialized) {\n        // We already have required loaderData so we can just set initialized\n        updateState({\n          initialized: true\n        });\n      } else {\n        // We still need to kick off initial data loads\n        startNavigation(Action.Pop, state.location);\n      }\n    });\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          deleteBlocker(blockerKey);\n          updateState({\n            blockers: new Map(state.blockers)\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n\n\n    if (isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, detectErrorBoundary, router.basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n\n      loadingNavigation = navigation;\n    } // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n\n    let activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, pendingActionData, pendingError); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(rf => fetchControllers.set(rf.key, pendingNavigationController));\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, detectErrorBoundary, router.basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    ); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, detectErrorBoundary, router.basename); // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    var _window;\n\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, init.basename || \"/\") == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, detectErrorBoundary, router.basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, request.signal), f.match, f.matches, manifest, detectErrorBoundary, router.basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let detectErrorBoundary = (opts == null ? void 0 : opts.detectErrorBoundary) || defaultDetectErrorBoundary;\n  let dataRoutes = convertRoutesToDataRoutes(routes, detectErrorBoundary, undefined, manifest);\n  let basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, detectErrorBoundary, basename, true, isRouteRequest, requestContext);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, detectErrorBoundary, basename, true, isRouteRequest, requestContext))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  let submission;\n\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  let defaultShouldRevalidate = // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push(_extends({\n        key\n      }, f, {\n        matches: null,\n        match: null\n      }));\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push(_extends({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n\n\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push(_extends({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nasync function loadLazyRouteModule(route, detectErrorBoundary, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy(); // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n\n  let routeUpdates = {};\n\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  } // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to detectErrorBoundary\n\n\n  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `detectErrorBoundary` function to set the `hasErrorBoundary` route\n    // property since the logic will differ between frameworks.\n    hasErrorBoundary: detectErrorBoundary(_extends({}, routeToUpdate)),\n    lazy: undefined\n  });\n}\n\nasync function callLoaderOrAction(type, request, match, matches, manifest, detectErrorBoundary, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result;\n  let onReject;\n\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n\n    onReject = () => reject();\n\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([runHandler(handler), loadLazyRouteModule(match.route, detectErrorBoundary, manifest)]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, detectErrorBoundary, manifest);\n        handler = match.route[type];\n\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: new URL(request.url).pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else {\n      invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n      result = await runHandler(handler);\n    }\n\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n        invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    var _result$init, _result$init2;\n\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","assign","origin","invariant","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","detectErrorBoundary","parentPath","manifest","treePath","id","join","children","indexRoute","hasErrorBoundary","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","prefix","array","isLastSegment","star","starParam","keyMatch","optional","param","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","pendingKeysSet","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","defaultDetectErrorBoundary","Boolean","createRouter","dataRoutes","inFlightDataRoutes","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","lazy","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","lazyMatches","lazyPromises","loadLazyRouteModule","all","dispose","clear","deleteFetcher","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","Request","handleLoaders","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","rf","fetcher","revalidatingFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp","redirectLocation","_extends","_isFetchActionRedirect","_window","isDifferentBasename","redirectHistoryAction","currentMatches","fetchersToLoad","f","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","defaultShouldRevalidate","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","isStaticRequest","resultType","onReject","runHandler","handler","activeMatches","resolvedLocation","protocol","isSameBasename","contentType","text","deferred","_result$init","toUpperCase","body","URLSearchParams","File","name","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp4","errorMessage","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches"],"sources":["D:\\source\\repos\\JavaScript\\ReactSandbox\\share-state\\node_modules\\@remix-run\\router\\history.ts","D:\\source\\repos\\JavaScript\\ReactSandbox\\share-state\\node_modules\\@remix-run\\router\\utils.ts","D:\\source\\repos\\JavaScript\\ReactSandbox\\share-state\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        hasErrorBoundary: detectErrorBoundary(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        hasErrorBoundary: detectErrorBoundary(route),\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          detectErrorBoundary,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        const starParam = params[star];\n\n        // Apply the splat\n        return starParam;\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n\n        if (optional === \"?\") {\n          return param == null ? \"\" : param;\n        }\n\n        if (param == null) {\n          invariant(false, `Missing \":${key}\" param`);\n        }\n\n        return param;\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultDetectErrorBoundary = (route: AgnosticRouteObject) =>\n  Boolean(route.hasErrorBoundary);\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let detectErrorBoundary =\n    init.detectErrorBoundary || defaultDetectErrorBoundary;\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (state.initialized) {\n      return router;\n    }\n\n    let lazyMatches = state.matches.filter((m) => m.route.lazy);\n\n    if (lazyMatches.length === 0) {\n      // Kick off initial data load if needed.  Use Pop to avoid modifying history\n      startNavigation(HistoryAction.Pop, state.location);\n      return router;\n    }\n\n    // Load lazy modules, then kick off initial data load if needed\n    let lazyPromises = lazyMatches.map((m) =>\n      loadLazyRouteModule(m.route, detectErrorBoundary, manifest)\n    );\n    Promise.all(lazyPromises).then(() => {\n      let initialized =\n        !state.matches.some((m) => m.route.loader) ||\n        init.hydrationData != null;\n      if (initialized) {\n        // We already have required loaderData so we can just set initialized\n        updateState({ initialized: true });\n      } else {\n        // We still need to kick off initial data loads\n        startNavigation(HistoryAction.Pop, state.location);\n      }\n    });\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename =\n        stripBasename(url.pathname, init.basename || \"/\") == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          router.basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, request.signal),\n            f.match,\n            f.matches,\n            manifest,\n            detectErrorBoundary,\n            router.basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let detectErrorBoundary =\n    opts?.detectErrorBoundary || defaultDetectErrorBoundary;\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({ key, ...f, matches: null, match: null });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to detectErrorBoundary\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `detectErrorBoundary` function to set the `hasErrorBoundary` route\n    // property since the logic will differ between frameworks.\n    hasErrorBoundary: detectErrorBoundary({ ...routeToUpdate }),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, detectErrorBoundary, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, detectErrorBoundary, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: new URL(request.url).pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else {\n      invariant<Function>(\n        handler,\n        `Could not find the ${type} to run on the \"${match.route.id}\" route`\n      );\n\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}