{"ast":null,"code":"var _jsxFileName = \"D:\\\\source\\\\repos\\\\JavaScript\\\\ReactSandbox\\\\React_Higher_Order_Component_Example\\\\src\\\\HOC.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HOC = (WrappedComponent, entity) => {\n  return class extends React.Component {\n    constructor() {\n      super(...arguments);\n      this.state = {\n        data: [],\n        term: \"\"\n      };\n    }\n    componentDidMount() {\n      const fetchData = async () => {\n        const res = await fetch(`https://jsonplaceholder.typicode.com/${entity}`);\n        const json = await res.json();\n        this.setState({\n          ...this.state,\n          data: json\n        });\n      };\n      fetchData();\n    }\n    render() {\n      let {\n        term,\n        data\n      } = this.state;\n      let filteredData = data.slice(0, 10).filter(d => {\n        if (entity === \"users\") {\n          const {\n            name\n          } = d;\n          return name.toLowerCase().indexOf(term) >= 0;\n        } else if (entity === \"todos\") {\n          const {\n            title\n          } = d;\n          return title.toLowerCase().indexOf(term) >= 0;\n        } else {\n          return null;\n        }\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: entity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text \",\n          value: term,\n          onChange: e => this.setState({\n            ...this.state,\n            term: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(WrappedComponent, {\n          data: filteredData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this);\n    }\n  };\n};\n_c = HOC;\nexport default HOC;\nvar _c;\n$RefreshReg$(_c, \"HOC\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","HOC","WrappedComponent","entity","Component","constructor","arguments","state","data","term","componentDidMount","fetchData","res","fetch","json","setState","render","filteredData","slice","filter","d","name","toLowerCase","indexOf","title","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["D:/source/repos/JavaScript/ReactSandbox/React_Higher_Order_Component_Example/src/HOC.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst HOC = (WrappedComponent, entity) => {\r\n    return class extends React.Component {\r\n        state = {\r\n            data: [],\r\n            term: \"\",\r\n        };\r\n        componentDidMount() {\r\n            const fetchData = async () => {\r\n                const res = await fetch(`https://jsonplaceholder.typicode.com/${entity}`);\r\n                const json = await res.json();\r\n                this.setState({ ...this.state, data: json })\r\n            };\r\n            fetchData();\r\n        }\r\n        render() {\r\n            let { term, data } = this.state;\r\n            let filteredData = data.slice(0, 10).filter(d => {\r\n\r\n                if (entity === \"users\") {\r\n                    const { name } = d;\r\n                    return name.toLowerCase().indexOf(term) >= 0;\r\n                } else if (entity === \"todos\") {\r\n                    const { title } = d;\r\n                    return title.toLowerCase().indexOf(term) >= 0;\r\n                } else {\r\n                    return null;\r\n                }\r\n\r\n            })\r\n\r\n            return (\r\n                <div>\r\n                    <h2>{entity}</h2>\r\n                    <input type=\"text \" value={term} onChange={(e) => this.setState({ ...this.state, term: e.target.value })} />\r\n                    <WrappedComponent data={filteredData}></WrappedComponent>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default HOC;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,GAAG,GAAGA,CAACC,gBAAgB,EAAEC,MAAM,KAAK;EACtC,OAAO,cAAcL,KAAK,CAACM,SAAS,CAAC;IAAAC,YAAA;MAAA,SAAAC,SAAA;MAAA,KACjCC,KAAK,GAAG;QACJC,IAAI,EAAE,EAAE;QACRC,IAAI,EAAE;MACV,CAAC;IAAA;IACDC,iBAAiBA,CAAA,EAAG;MAChB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;QAC1B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,wCAAuCV,MAAO,EAAC,CAAC;QACzE,MAAMW,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAI,EAAE;QAC7B,IAAI,CAACC,QAAQ,CAAC;UAAE,GAAG,IAAI,CAACR,KAAK;UAAEC,IAAI,EAAEM;QAAK,CAAC,CAAC;MAChD,CAAC;MACDH,SAAS,EAAE;IACf;IACAK,MAAMA,CAAA,EAAG;MACL,IAAI;QAAEP,IAAI;QAAED;MAAK,CAAC,GAAG,IAAI,CAACD,KAAK;MAC/B,IAAIU,YAAY,GAAGT,IAAI,CAACU,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,MAAM,CAACC,CAAC,IAAI;QAE7C,IAAIjB,MAAM,KAAK,OAAO,EAAE;UACpB,MAAM;YAAEkB;UAAK,CAAC,GAAGD,CAAC;UAClB,OAAOC,IAAI,CAACC,WAAW,EAAE,CAACC,OAAO,CAACd,IAAI,CAAC,IAAI,CAAC;QAChD,CAAC,MAAM,IAAIN,MAAM,KAAK,OAAO,EAAE;UAC3B,MAAM;YAAEqB;UAAM,CAAC,GAAGJ,CAAC;UACnB,OAAOI,KAAK,CAACF,WAAW,EAAE,CAACC,OAAO,CAACd,IAAI,CAAC,IAAI,CAAC;QACjD,CAAC,MAAM;UACH,OAAO,IAAI;QACf;MAEJ,CAAC,CAAC;MAEF,oBACIT,OAAA;QAAAyB,QAAA,gBACIzB,OAAA;UAAAyB,QAAA,EAAKtB;QAAM;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM,eACjB7B,OAAA;UAAO8B,IAAI,EAAC,OAAO;UAACC,KAAK,EAAEtB,IAAK;UAACuB,QAAQ,EAAGC,CAAC,IAAK,IAAI,CAAClB,QAAQ,CAAC;YAAE,GAAG,IAAI,CAACR,KAAK;YAAEE,IAAI,EAAEwB,CAAC,CAACC,MAAM,CAACH;UAAM,CAAC;QAAE;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG,eAC5G7B,OAAA,CAACE,gBAAgB;UAACM,IAAI,EAAES;QAAa;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAoB;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACvD;IAEd;EACJ,CAAC;AACL,CAAC;AAAAM,EAAA,GAvCKlC,GAAG;AAyCT,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}